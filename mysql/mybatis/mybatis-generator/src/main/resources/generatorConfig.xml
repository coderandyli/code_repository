<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <properties resource="settings.properties"/>
    <!-- mysql驱动的位置 -->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <context id="Tables" targetRuntime="MyBatis3">

        <!-- 生成的 Java 文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化 Java 代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化 XML 代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- 注释 -->
        <commentGenerator>
            <!-- 是否生成注释代时间戳 -->
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <property name="author" value="andy"/>
            <property name="dateFormat" value="yyyy/MM/dd"/>
        </commentGenerator>

        <!--&lt;!&ndash; 自定义注释生成器 &ndash;&gt;-->
        <!--<commentGenerator type="com.orange.verify.builder.config.MySQLCommentGenerator">-->
        <!---->
        <!---->
        <!--</commentGenerator>-->

        <!-- JDBC连接 -->
        <jdbcConnection
                driverClass="${jdbc.driverClass}"
                connectionURL="${jdbc.connectionURL}"
                userId="${jdbc.username}"
                password="${jdbc.password}">
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
         NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="com.coderandyli.mybatisgenerator.entity" targetProject="src/main/java">
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true"/>
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </javaModelGenerator>

        <!-- 生成mapper xml文件 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 生成mapper xml对应Client-->
        <javaClientGenerator targetPackage="com.coderandyli.mybatisgenerator.mapper" targetProject="src/main/java"
                             type="XMLMAPPER">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 配置表信息 -->
        <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample
            是否生成 example类 -->


        <table tableName="user" domainObjectName="User" enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>

        <!-- optional , only for mybatis3 runtime 自动生成的键值（identity,或者序列值） 如果指定此元素，MBG将会生成<selectKey>元素，然后将此元素插入到SQL
			Map的<insert> 元素之中 sqlStatement 的语句将会返回新的值 如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句.
			预定义的值如下: Cloudscape This will translate to: VALUES IDENTITY_VAL_LOCAL() DB2:
			VALUES IDENTITY_VAL_LOCAL() DB2_MF: SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
			Derby: VALUES IDENTITY_VAL_LOCAL() HSQLDB: CALL IDENTITY() Informix: select
			dbinfo('sqlca.sqlerrd1') from systables where tabid=1 MySql: SELECT LAST_INSERT_ID()
			SqlServer: SELECT SCOPE_IDENTITY() SYBASE: SELECT @@IDENTITY JDBC: This will
			configure MBG to generate code for MyBatis3 suport of JDBC standard generated
			keys. This is a database independent method of obtaining the value from identity
			columns. identity: 自增主键 If true, then the column is flagged as an identity
			column and the generated <selectKey> element will be placed after the insert
			(for an identity column). If false, then the generated <selectKey> will be
			placed before the insert (typically for a sequence). -->
        <!--<generatedKey column="" sqlStatement="" identity="" type=""/> -->

        <!-- optional. 列的命名规则： MBG使用 <columnRenamingRule> 元素在计算列名的对应 名称之前，先对列名进行重命名，
            作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤 支持正在表达式 searchString 表示要被换掉的字符串 replaceString
            则是要换成的字符串，默认情况下为空字符串，可选 -->
        <!--<columnRenamingRule searchString="" replaceString=""/> -->

        <!-- optional.告诉 MBG 忽略某一列 column，需要忽略的列 delimitedColumnName:true ,匹配column的值和数据库列的名称
            大小写完全匹配，false 忽略大小写匹配 是否限定表的列名，即固定表列在Model中的名称 -->
        <!--<ignoreColumn column="PLAN_ID" delimitedColumnName="true" /> -->

        <!--optional.覆盖MBG对Model 的生成规则 column: 数据库的列名 javaType: 对应的Java数据类型的完全限定名
            在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型. For some databases, this is necessary
            to handle "odd" database types (e.g. MySql's unsigned bigint type should
            be mapped to java.lang.Object). jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC,
            VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，对某些数据库而言，对于处理特定的JDBC 驱动癖好
            很有必要(e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).
            typeHandler: -->
        <!--<columnOverride column="" javaType="" jdbcType="" typeHandler="" delimitedColumnName=""
            /> -->
    </context>
</generatorConfiguration>